from dataclasses import dataclass
from typing import List, Dict, Optional, Any
from enum import Enum
import datetime


class TradingSignalType(Enum):
    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"


class RiskLevel(Enum):
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"
    VERY_HIGH = "VERY_HIGH"


@dataclass
class TokenInfo:
    """Information about a token"""
    symbol: str
    name: str
    address: str
    price_usd: float
    market_cap: Optional[float] = None
    volume_24h: Optional[float] = None
    price_change_24h: Optional[float] = None
    liquidity: Optional[float] = None
    holders: Optional[int] = None
    created_at: Optional[datetime.datetime] = None
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class TradingSignal:
    """Trading signal generated by the strategy module"""
    token: TokenInfo
    signal_type: TradingSignalType
    confidence: float  # 0.0 to 1.0
    entry_price: float
    target_price: float
    stop_loss: float
    risk_level: RiskLevel
    timestamp: datetime.datetime
    reasoning: str
    source: str  # e.g., "trend_analysis", "wallet_tracking", "volume_spike"
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class TradeExecution:
    """Record of a trade execution"""
    token: TokenInfo
    trade_type: TradingSignalType
    amount_usd: float
    quantity: float
    price: float
    timestamp: datetime.datetime
    transaction_hash: str
    fee: float
    status: str  # "completed", "pending", "failed"
    signal_id: Optional[str] = None  # Reference to the signal that triggered this trade


@dataclass
class Portfolio:
    """Current portfolio state"""
    total_value_usd: float
    initial_capital: float
    available_capital: float
    profit_loss: float
    profit_loss_percentage: float
    holdings: List[Dict[str, Any]]  # List of current token holdings
    trade_history: List[TradeExecution]
    updated_at: datetime.datetime


@dataclass
class WalletInfo:
    """Information about a tracked wallet"""
    address: str
    name: Optional[str] = None
    tags: Optional[List[str]] = None
    performance_7d: Optional[float] = None
    total_trades: Optional[int] = None
    successful_trades: Optional[int] = None
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class MarketState:
    """Current state of the market"""
    trending_tokens: List[TokenInfo]
    sol_price: float
    market_sentiment: str  # "bullish", "bearish", "neutral"
    updated_at: datetime.datetime
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class BotConfig:
    """Configuration for the trading bot"""
    initial_capital: float
    max_risk_per_trade: float  # Percentage of capital to risk per trade
    target_daily_profit: float  # Target daily profit percentage
    stop_loss_percentage: float  # Default stop loss percentage
    take_profit_percentage: float  # Default take profit percentage
    max_concurrent_trades: int
    trading_hours: List[Dict[str, Any]]  # Hours when the bot should trade
    risk_management_settings: Dict[str, Any]
    tracked_wallets: List[WalletInfo]
    api_keys: Dict[str, str]
    notification_settings: Dict[str, Any]
